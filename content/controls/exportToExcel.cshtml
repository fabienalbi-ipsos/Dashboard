@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using ClosedXML.Excel;
@using System.Globalization;

@{
    // Get dashboard data and convert it to a json object
    var data = db.UI_Data_GetAll();
    JArray json = JArray.Parse(JsonConvert.SerializeObject(data));

    IEnumerable<string> kpilist = new string[] { "61", "62", "66", "63", "65", "67", "69", "610", "611", "612", "71", "72", "73", "74", "81", "91" };
    IXLWorksheet ws = new XLWorkbook().AddWorksheet("blank");
    int columncount = 0, columnindex = 0, rowindex = 0, emptyrow = 100;
    bool iscount;
    decimal value;
    NumberFormatInfo nfi = (NumberFormatInfo)CultureInfo.InvariantCulture.NumberFormat.Clone();
    nfi.NumberGroupSeparator = " ";
    nfi.NumberDecimalSeparator = ".";
    string compliance = "";

    //Creates the excel workbook
    var workbook = new XLWorkbook();
    workbook.PageOptions.PageOrientation = XLPageOrientation.Landscape;
    workbook.PageOptions.Margins.Left = 0.5;
    workbook.PageOptions.Margins.Right = 0.5;
    workbook.PageOptions.FitToPages(1, 1);

    //Add parameters info
    var parameters = json.Children<JObject>().Where(p => p["RecordType"].ToString() == "parameter");
    var year = json.Children<JObject>().FirstOrDefault(p => p["RecordType"].ToString() == "parameter" && p["ParameterType"].ToString() == "3").GetValue("ParameterValueName").ToString();
    var month = json.Children<JObject>().FirstOrDefault(p => p["RecordType"].ToString() == "parameter" && p["ParameterType"].ToString() == "4").GetValue("ParameterValueName").ToString();
    var selectedscope = json.Children<JObject>().FirstOrDefault(p => p["RecordType"].ToString() == "parameter" && p["ParameterType"].ToString() == "2").GetValue("ParameterValueName").ToString();
    var currency = json.Children<JObject>().FirstOrDefault(p => p["RecordType"].ToString() == "parameter" && p["ParameterType"].ToString() == "5").GetValue("ParameterValueName").ToString();
    var rounding = json.Children<JObject>().FirstOrDefault(p => p["RecordType"].ToString() == "parameter" && p["ParameterType"].ToString() == "7").GetValue("ParameterValueName").ToString();
    var ratetype = json.Children<JObject>().FirstOrDefault(p => p["RecordType"].ToString() == "parameter" && p["ParameterType"].ToString() == "6").GetValue("ParameterValueName").ToString();
    var username = json.Children<JObject>().FirstOrDefault(p => p["RecordType"].ToString() == "parameter" && p["ParameterType"].ToString() == "0");
    var printedon = json.Children<JObject>().FirstOrDefault(p => p["RecordType"].ToString() == "parameter" && p["ParameterType"].ToString() == "99").GetValue("ParameterValueName").ToString();

    ws = workbook.AddWorksheet("Parameters");
    ws.PageSetup.Header.Left.AddText(selectedscope + " - " + month + " " + year + " - " + currency + " - " + rounding + " - " + ratetype + " \nPrinted on " + printedon);
    if (username != null)
    {
        ws.PageSetup.Header.Right.AddText("Generated by " + username.GetValue("ParameterValueName").ToString());
    }
    ws.PageSetup.Footer.Left.AddText("Confidential - for internal purposes only. Not to be distributed to outside parties. © 2017 Ipsos");
    ws.PageSetup.Margins.Top = 1;
    ws.PageSetup.Margins.Footer = 0.5;
    ws.TabColor = XLColor.FromArgb(113, 178, 185);
    foreach (var param in parameters)
    {
        ws.Cell(++rowindex, 1).Value = param.GetValue("ParameterName").ToString();
        ws.Cell(rowindex, 2).Value = param.GetValue("ParameterValueName").ToString();
    }
    ws.Range(1, 1, 10, 1).Style.Font.Bold = true;
    ws.Range(2, 2, 10, 2).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Left;
    ws.Range(1, 1, rowindex, 2).Style.Border.InsideBorder = XLBorderStyleValues.Thin;
    ws.Range(1, 1, rowindex, 2).Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
    ws.Columns(1, 2).AdjustToContents();

    //Add two decimals to amount cells if rounding is in Millions
    string dec = "0";
    if (rounding == "Millions") { dec = "2"; }

    //Add Top Pitches
    var pitches = json.Children<JObject>().Where(p => p["KPIKey"].ToString() == "TP" && p["RecordType"].ToString() == "tableData");
    ws = workbook.AddWorksheet("Top pitches won");
    ws.PageSetup.Header.Left.AddText(selectedscope + " - " + month + " " + year + " - " + currency + " - " + rounding + " - " + ratetype + " \nPrinted on " + printedon);
    if (username != null)
    {
        ws.PageSetup.Header.Right.AddText("Generated by " + username.GetValue("ParameterValueName").ToString());
    }
    ws.PageSetup.Footer.Left.AddText("Confidential - for internal purposes only. Not to be distributed to outside parties. © 2017 Ipsos");
    ws.PageSetup.Margins.Top = 1;
    ws.PageSetup.Margins.Footer = 0.5;
    rowindex = 0;
    ws.TabColor = XLColor.FromArgb(113, 178, 185);
    ws.Range(1, 1, 1, 2).Style.Fill.BackgroundColor = XLColor.FromArgb(181, 180, 180);
    ws.Range(1, 1, 1, 2).Style.Font.FontColor = XLColor.FromArgb(255, 255, 255);
    ws.Range(1, 1, 1, 2).Style.Font.Bold = true;
    ws.Range(1, 1, 1, 2).Style.Font.SetFontSize(12);
    ws.Range(1, 1, 1, 2).Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
    ws.Cell(++rowindex, 1).Value = "Top pitches won this month";
    ws.Cell(++rowindex, 1).Value = "Client";
    ws.Cell(rowindex, 2).Value = "Amount";
    ws.Range(rowindex, 1, rowindex, 2).Style.Font.Bold = true;
    foreach (var pitch in pitches)
    {
        ws.Cell(++rowindex, 1).Value = pitch.GetValue("RowDescription").ToString();
        ws.Cell(rowindex, 2).Value = pitch.GetValue("Col1").ToString();
    }
    ws.Range(1, 2, rowindex, 2).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Right;
    ws.Range(2, 1, rowindex, 2).Style.Border.InsideBorder = XLBorderStyleValues.Thin;
    ws.Range(2, 1, rowindex, 2).Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
    ws.Columns("1").AdjustToContents();

    foreach (string kpi in kpilist)
    {
        emptyrow = 100;
        if (json.Children<JObject>().Where(p => p["KPIKey"].ToString() == kpi && p["RecordType"].ToString() == "tableData").Count() == 0 ||
            ((kpi == "611" || kpi == "612") && json.Children<JObject>().Where(p => p["KPIKey"].ToString() == kpi && p["RowKey"].ToString() == "11").Count() == 0))
        {
            continue;
        }
        if (kpi != "65" && !(kpi == "612" && ws.Name == "CSM"))
        {
            //Get KPI Name for Worksheet
            string kpiName = json.Children<JObject>().FirstOrDefault(p => p["KPIKey"].ToString() == kpi && p["RowKey"].ToString() == "100").GetValue("RowDescription").ToString();
            if (kpi == "610") { kpiName = "External AR Overdue > 60 Days"; }
            if (kpi == "72") { kpiName = "Permanent Employee Turnover"; }
            if (kpi == "91") { kpiName = "New Services Ext. AOT Estimate"; }
            if (kpi == "611" || kpi == "612") { kpiName = "CSM"; }

            //Add a new sheet to the workbook
            ws = workbook.Worksheets.Add(kpiName);

            //Add print headers and footers
            ws.PageSetup.Header.Left.AddText(selectedscope + " - " + month + " " + year + " - " + currency + " - " + rounding + " - " + ratetype + " \nPrinted on " + printedon);
            if (username != null)
            {
                ws.PageSetup.Header.Right.AddText("Generated by " + username.GetValue("ParameterValueName").ToString());
            }
            ws.PageSetup.Footer.Left.AddText("Confidential - for internal purposes only. Not to be distributed to outside parties. © 2017 Ipsos");
            ws.PageSetup.Margins.Footer = 0.5;
            ws.PageSetup.Margins.Top = 1;

            //Add section color to kpi tabs
            if (kpi == "71" || kpi == "72" || kpi == "73" || kpi == "74") { ws.TabColor = XLColor.FromArgb(113, 178, 185); }
            else if (kpi == "81") { ws.TabColor = XLColor.FromArgb(0, 118, 129); }
            else { ws.TabColor = XLColor.FromArgb(27, 54, 93); }

            //reset counting / cell position variables
            columncount = 0; columnindex = 0; rowindex = 0;

            JObject titleBar = json.Children<JObject>().FirstOrDefault(p => p["KPIKey"].ToString() == kpi && p["RecordType"].ToString() == "kpiTitleBar");
            columncount = Int32.Parse(titleBar.GetValue("ColumnCount").ToString());

            //Title bar styling
            ws.Range(1, 1, 1, columncount).Style.Fill.BackgroundColor = XLColor.FromArgb(181, 180, 180);
            ws.Range(1, 1, 1, columncount).Style.Font.FontColor = XLColor.FromArgb(255, 255, 255);
            ws.Range(1, 1, 1, columncount).Style.Font.Bold = true;
            ws.Range(1, 1, 1, columncount).Style.Font.SetFontSize(12);
            ws.Range(1, 1, 1, columncount).Style.Border.OutsideBorder = XLBorderStyleValues.Thin;

            //Title bar name
            if (kpi == "611" || kpi == "612") { ws.Cell(++rowindex, ++columnindex).Value = "CSM"; }
            else { ws.Cell(++rowindex, ++columnindex).Value = titleBar.GetValue("RowDescription").ToString(); }

            //Title bar value
            if (titleBar.GetValue("Col1").ToString().Contains("%"))
            {
                if (kpi == "63")
                {
                    decimal kpi63value, kpi65value;
                    bool kpi63test = Decimal.TryParse((titleBar.GetValue("Col1").ToString().Replace("%", "").Replace(" ", "")), out kpi63value);
                    bool kpi65test = Decimal.TryParse((json.Children<JObject>().FirstOrDefault(p => p["KPIKey"].ToString() == "65" && p["RecordType"].ToString() == "kpiTitleBar").GetValue("Col1").ToString().Replace("%", "").Replace(" ", "")), out kpi65value);
                    if (kpi63test == true && kpi65test == true)
                    {
                        ws.Cell(rowindex, columncount - 1).Value = ((kpi63value + kpi65value) / 2).ToString("F1") + "%";
                    }
                    else if (kpi63test == true)
                    {
                        ws.Cell(rowindex, columncount - 1).Value = kpi63value.ToString("F1") + "%";
                    }
                    else if (kpi65test == true)
                    {
                        ws.Cell(rowindex, columncount - 1).Value = kpi65value.ToString("F1") + "%";
                    }
                    else
                    {
                        ws.Cell(rowindex, columncount - 1).Value = "-";
                    }
                }
                else
                {
                    ws.Cell(rowindex, columncount - 1).Value = titleBar.GetValue("Col1").ToString().Replace(" ", "");
                }
            }
            else if (kpi == "71")
            {
                ws.Cell(rowindex, columncount - 1).Value = titleBar.GetValue("Col1").ToString();
                ws.Cell(rowindex, columncount - 1).Style.NumberFormat.Format = "0.0";
            }
            else
            {
                ws.Cell(rowindex, columncount - 1).Value = titleBar.GetValue("Col1").ToString() + " " + titleBar.GetValue("RoundingType").ToString();
            }

            ws.Cell(rowindex, columncount - 1).DataType = XLCellValues.Text;

            //Title bar variance
            if (titleBar.GetValue("Col2").ToString().Contains("%"))
            {
                ws.Cell(rowindex, columncount).Value = titleBar.GetValue("Col2").ToString().Replace(" ", "");
            }
            else if (kpi == "71")
            {
                ws.Cell(rowindex, columncount).Value = titleBar.GetValue("Col2").ToString();
            }
            else
            {
                ws.Cell(rowindex, columncount).Value = titleBar.GetValue("Col2").ToString();
                if (titleBar.GetValue("Col2").ToString().Contains("+")) { ws.Cell(rowindex, columncount).Style.NumberFormat.Format = "+0.0"; }
            }
            ws.Cell(rowindex, columncount).DataType = XLCellValues.Text;
            ws.Range(1, 2, 100, 100).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Right;
        }
        else { emptyrow = ++rowindex; ++columncount; }

        ++rowindex;
        columnindex = 1;
        if (kpi == "63")
        {
            ws.Cell(rowindex, columnindex).Value = "Pitch Creation Compliance";
            ws.Cell(rowindex, columnindex).Style.Font.Bold = true;
        }
        else if (kpi == "65")
        {
            ws.Cell(rowindex, columnindex).Value = "Jobs Closing Compliance";
            ws.Cell(rowindex, columnindex).Style.Font.Bold = true;
        }
        else if (kpi == "611")
        {
            ws.Cell(rowindex, columnindex).Value = "eCSM";
            ws.Cell(rowindex, columnindex).Style.Font.Bold = true;
        }
        else if (kpi == "612")
        {
            ws.Cell(rowindex, columnindex).Value = "iCSM to CS";
            ws.Cell(rowindex, columnindex).Style.Font.Bold = true;
        }
        foreach (JObject item in json.Children<JObject>().Where(p => p["KPIKey"].ToString() == kpi && p["RecordType"].ToString() == "columnTitles"))
        {
            columnindex += 1;
            ws.Cell(rowindex, columnindex).Value = item.GetValue("RowDescription").ToString();
            ws.Cell(rowindex, columnindex).Style.Font.Bold = true;
        }
        --columncount;
        foreach (JObject item in json.Children<JObject>().Where(p => p["KPIKey"].ToString() == kpi && p["RecordType"].ToString() == "tableData"))
        {
            rowindex += 1;
            ws.Cell(rowindex, 1).Value = item.GetValue("RowDescription").ToString();
            if (item.GetValue("RowDescription").ToString().Contains("Count")) { iscount = true; }
            else { iscount = false; }
            if (item.GetValue("Class").ToString().Contains("subTotalRow")) { ws.Rows(rowindex.ToString()).Style.Font.Bold = true; }
            for (var i = 1; i <= columncount; i++)
            {
                if (item.GetValue("Col" + i).ToString().Contains("%"))
                {
                    ws.Cell(rowindex, i + 1).Value = item.GetValue("Col" + i).ToString().Replace(" ", "");
                    ws.Cell(rowindex, i + 1).DataType = XLCellValues.Text;
                }
                else
                {
                    decimal.TryParse(item.GetValue("Col" + i).ToString().Replace(" ", "").Replace("+", "").Replace("pts",""), out value);
                    if (item.GetValue("Col" + i).ToString().Contains("pts")) { ws.Cell(rowindex, i + 1).Value = item.GetValue("Col" + i).ToString(); }
                    else
                    {
                        if (item.GetValue("Col" + i).ToString() == "-")
                        {
                            ws.Cell(rowindex, i + 1).Value = "-";
                        }
                        else if ((kpi == "611" || kpi == "612") && item.GetValue("RowKey").ToString() == "11")
                        {
                            ws.Cell(rowindex, i + 1).Value = value.ToString("N2", nfi);
                        }
                        else if (iscount || item.GetValue("RowDescription").ToString() == "Data not yet available for this month" || kpi == "72")
                        {
                            ws.Cell(rowindex, i + 1).Value = value.ToString("N0", nfi);
                        }
                        else if (kpi == "71")
                        {
                            if (item.GetValue("Col" + i).ToString().Contains("+")) { ws.Cell(rowindex, i + 1).Value = "+" + value.ToString("N1", nfi); }
                            else { ws.Cell(rowindex, i + 1).Value = value.ToString("N1", nfi); }
                        }
                        else
                        {
                            ws.Cell(rowindex, i + 1).Value = value.ToString("N" + dec, nfi);
                        }
                    }
                    ws.Cell(rowindex, i + 1).DataType = XLCellValues.Text;
                }
                if (kpi == "63" || kpi == "65")
                {
                    compliance += item.GetValue("Col" + i).ToString();
                    if (compliance == "------000000------000000") { ws.Delete(); }
                }
            }
        }
        ws.Range(2, 1, rowindex, columnindex).Style.Border.InsideBorder = XLBorderStyleValues.Thin;
        ws.Range(2, 1, rowindex, columnindex).Style.Border.OutsideBorder = XLBorderStyleValues.Thin;
        ws.Row(emptyrow).Style.Border.LeftBorder = XLBorderStyleValues.None;
        ws.Row(emptyrow).Style.Border.RightBorder = XLBorderStyleValues.None;
        ws.Range(2, 2, 2, columnindex).Style.Alignment.WrapText = true;
        ws.Columns().Width = 11;
        ws.Column(1).AdjustToContents();

    }

    // Prepare the response
    HttpResponse httpResponse = HttpContext.Current.Response;
    httpResponse.Clear();
    httpResponse.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
    httpResponse.AddHeader("content-disposition", "attachment;filename=\"BI Business Dashboard.xlsx\"");

    // Flush the workbook to the Response.OutputStream
    using (MemoryStream memoryStream = new MemoryStream())
    {
        workbook.SaveAs(memoryStream);
        memoryStream.WriteTo(httpResponse.OutputStream);
        memoryStream.Close();
    }

    httpResponse.End();
}